// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["clientExtensions"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

//site schemas

model Project {
  id            Int      @id @default(autoincrement())
  slug          String   @unique @db.VarChar(255)
  title         String   @db.VarChar(255)
  description   String?
  published     Boolean  @default(false)
  createdAt     DateTime @default(now()) @db.Timestamp(6)
  issues        Issue[]
}

model Issue {
  id            Int      @id @default(autoincrement())
  token         String   @unique @db.VarChar(255)
  title         String   @db.VarChar(255)
  description   String?  @db.Text
  closed        Boolean  @default(false)
  project       Project  @relation(fields: [projectId], references: [id])
  projectId     Int
  status        Status   @relation(fields: [statusId], references: [id])
  statusId      Int
  owner         User    @relation(fields: [ownerId], references: [id])
  ownerId       Int
  type          Type     @relation(fields: [typeId], references: [id])
  typeId        Int
  createdAt     DateTime @default(now()) @db.Timestamp(6)
  updatedAt     DateTime? @db.Timestamp(6)
  deletedAt     DateTime? @db.Timestamp(6)
  closedAt      DateTime? @db.Timestamp(6)
  assignees     UsersOnIssues[]
  history       History[]
}

model History {
  id            Int      @id @default(autoincrement())
  issue         Issue    @relation(fields: [issueId], references: [id])
  issueId       Int
  user          User     @relation(fields: [userId], references: [id])
  userId        Int
  status        String   @db.VarChar(255)
  type          String   @db.VarChar(255)
  createdAt     DateTime @default(now()) @db.Timestamp(6)
}

model UsersOnIssues {
  issue       Issue     @relation(fields: [issueId], references: [id])
  issueId     Int // relation scalar field (used in the `@relation` attribute above)
  user        User @relation(fields: [userId], references: [id])
  userId      Int // relation scalar field (used in the `@relation` attribute above)
  assignedAt  DateTime @default(now())

  @@id([issueId, userId])
}

model Status {
  id            Int      @id @default(autoincrement())
  title         String   @db.VarChar(255)
  createdAt     DateTime @default(now()) @db.Timestamp(6)
  issues        Issue[]
}

model Type {
  id            Int      @id @default(autoincrement())
  title         String   @db.VarChar(255)
  createdAt     DateTime @default(now()) @db.Timestamp(6)
  issues        Issue[]
}

//account auth schemas

model Account {
  id                 Int      @id @default(autoincrement())
  userId             Int
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id              Int      @id @default(autoincrement())
  sessionToken    String   @unique
  userId          Int
  expires         DateTime
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier      String
  token           String   @unique
  expires         DateTime

  @@unique([identifier, token])
}

model User {
  id              Int       @id @default(autoincrement())
  name            String?   @db.VarChar(255)
  email           String?   @unique @db.VarChar(255)
  emailVerified   DateTime?
  image           String?
  accounts        Account[]
  sessions        Session[]
  IssueOwned      Issue[]
  issuesAssigned  UsersOnIssues[]
  history         History[]
}
